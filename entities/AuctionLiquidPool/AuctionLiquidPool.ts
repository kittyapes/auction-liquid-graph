// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionEnded extends ethereum.Event {
  get params(): AuctionEnded__Params {
    return new AuctionEnded__Params(this);
  }
}

export class AuctionEnded__Params {
  _event: AuctionEnded;

  constructor(event: AuctionEnded) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AuctionStarted extends ethereum.Event {
  get params(): AuctionStarted__Params {
    return new AuctionStarted__Params(this);
  }
}

export class AuctionStarted__Params {
  _event: AuctionStarted;

  constructor(event: AuctionStarted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get starter(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BidPlaced extends ethereum.Event {
  get params(): BidPlaced__Params {
    return new BidPlaced__Params(this);
  }
}

export class BidPlaced__Params {
  _event: BidPlaced;

  constructor(event: BidPlaced) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NFTsLocked extends ethereum.Event {
  get params(): NFTsLocked__Params {
    return new NFTsLocked__Params(this);
  }
}

export class NFTsLocked__Params {
  _event: NFTsLocked;

  constructor(event: NFTsLocked) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redeemed extends ethereum.Event {
  get params(): Redeemed__Params {
    return new Redeemed__Params(this);
  }
}

export class Redeemed__Params {
  _event: Redeemed;

  constructor(event: Redeemed) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class Swaped extends ethereum.Event {
  get params(): Swaped__Params {
    return new Swaped__Params(this);
  }
}

export class Swaped__Params {
  _event: Swaped;

  constructor(event: Swaped) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get srcTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get dstTokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AuctionLiquidPool__auctionsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getWinner(): Address {
    return this.value0;
  }

  getBidAmount(): BigInt {
    return this.value1;
  }

  getStartedAt(): BigInt {
    return this.value2;
  }
}

export class AuctionLiquidPool extends ethereum.SmartContract {
  static bind(address: Address): AuctionLiquidPool {
    return new AuctionLiquidPool("AuctionLiquidPool", address);
  }

  auctions(param0: BigInt): AuctionLiquidPool__auctionsResult {
    let result = super.call(
      "auctions",
      "auctions(uint256):(address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new AuctionLiquidPool__auctionsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_auctions(
    param0: BigInt
  ): ethereum.CallResult<AuctionLiquidPool__auctionsResult> {
    let result = super.tryCall(
      "auctions",
      "auctions(uint256):(address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuctionLiquidPool__auctionsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  createdAt(): BigInt {
    let result = super.call("createdAt", "createdAt():(uint64)", []);

    return result[0].toBigInt();
  }

  try_createdAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("createdAt", "createdAt():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delta(): BigInt {
    let result = super.call("delta", "delta():(uint256)", []);

    return result[0].toBigInt();
  }

  try_delta(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("delta", "delta():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dexToken(): Address {
    let result = super.call("dexToken", "dexToken():(address)", []);

    return result[0].toAddress();
  }

  try_dexToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("dexToken", "dexToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  duration(): BigInt {
    let result = super.call("duration", "duration():(uint64)", []);

    return result[0].toBigInt();
  }

  try_duration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("duration", "duration():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeTypes(param0: BigInt): i32 {
    let result = super.call("feeTypes", "feeTypes(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toI32();
  }

  try_feeTypes(param0: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("feeTypes", "feeTypes(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  feeValues(param0: BigInt): i32 {
    let result = super.call("feeValues", "feeValues(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toI32();
  }

  try_feeValues(param0: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("feeValues", "feeValues(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getFeeTypes(): Array<i32> {
    let result = super.call("getFeeTypes", "getFeeTypes():(uint8[])", []);

    return result[0].toI32Array();
  }

  try_getFeeTypes(): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall("getFeeTypes", "getFeeTypes():(uint8[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  getFeeValues(): Array<i32> {
    let result = super.call("getFeeValues", "getFeeValues():(uint16[])", []);

    return result[0].toI32Array();
  }

  try_getFeeValues(): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall("getFeeValues", "getFeeValues():(uint16[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  getFreeTokenIds(): Array<BigInt> {
    let result = super.call(
      "getFreeTokenIds",
      "getFreeTokenIds():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getFreeTokenIds(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getFreeTokenIds",
      "getFreeTokenIds():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getTokenIds(): Array<BigInt> {
    let result = super.call("getTokenIds", "getTokenIds():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_getTokenIds(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getTokenIds", "getTokenIds():(uint256[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isLinear(): boolean {
    let result = super.call("isLinear", "isLinear():(bool)", []);

    return result[0].toBoolean();
  }

  try_isLinear(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLinear", "isLinear():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockPeriod(): BigInt {
    let result = super.call("lockPeriod", "lockPeriod():(uint64)", []);

    return result[0].toBigInt();
  }

  try_lockPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockPeriod", "lockPeriod():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  logo(): string {
    let result = super.call("logo", "logo():(string)", []);

    return result[0].toString();
  }

  try_logo(): ethereum.CallResult<string> {
    let result = super.tryCall("logo", "logo():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mappingToken(): Address {
    let result = super.call("mappingToken", "mappingToken():(address)", []);

    return result[0].toAddress();
  }

  try_mappingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("mappingToken", "mappingToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nft(): Address {
    let result = super.call("nft", "nft():(address)", []);

    return result[0].toAddress();
  }

  try_nft(): ethereum.CallResult<Address> {
    let result = super.tryCall("nft", "nft():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  randomFee(): i32 {
    let result = super.call("randomFee", "randomFee():(uint16)", []);

    return result[0].toI32();
  }

  try_randomFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("randomFee", "randomFee():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  ratio(): BigInt {
    let result = super.call("ratio", "ratio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ratio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ratio", "ratio():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(count: BigInt): Array<BigInt> {
    let result = super.call("redeem", "redeem(uint32):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(count)
    ]);

    return result[0].toBigIntArray();
  }

  try_redeem(count: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("redeem", "redeem(uint32):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(count)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  startPrice(): BigInt {
    let result = super.call("startPrice", "startPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startPrice", "startPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swap(tokenId: BigInt): BigInt {
    let result = super.call("swap", "swap(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_swap(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("swap", "swap(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tradingFee(): i32 {
    let result = super.call("tradingFee", "tradingFee():(uint16)", []);

    return result[0].toI32();
  }

  try_tradingFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("tradingFee", "tradingFee():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class EndAuctionCall extends ethereum.Call {
  get inputs(): EndAuctionCall__Inputs {
    return new EndAuctionCall__Inputs(this);
  }

  get outputs(): EndAuctionCall__Outputs {
    return new EndAuctionCall__Outputs(this);
  }
}

export class EndAuctionCall__Inputs {
  _call: EndAuctionCall;

  constructor(call: EndAuctionCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EndAuctionCall__Outputs {
  _call: EndAuctionCall;

  constructor(call: EndAuctionCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get mToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get params(): InitializeCallParamsStruct {
    return changetype<InitializeCallParamsStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCallParamsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get logo(): string {
    return this[1].toString();
  }

  get owner(): Address {
    return this[2].toAddress();
  }

  get nft(): Address {
    return this[3].toAddress();
  }

  get lockPeriod(): BigInt {
    return this[4].toBigInt();
  }

  get duration(): BigInt {
    return this[5].toBigInt();
  }

  get tokenIds(): Array<BigInt> {
    return this[6].toBigIntArray();
  }

  get isLinear(): boolean {
    return this[7].toBoolean();
  }

  get delta(): BigInt {
    return this[8].toBigInt();
  }

  get ratio(): BigInt {
    return this[9].toBigInt();
  }

  get randomFee(): i32 {
    return this[10].toI32();
  }

  get tradingFee(): i32 {
    return this[11].toI32();
  }

  get startPrice(): BigInt {
    return this[12].toBigInt();
  }

  get feeTypes(): Array<i32> {
    return this[13].toI32Array();
  }

  get feeValues(): Array<i32> {
    return this[14].toI32Array();
  }
}

export class LockNFTsCall extends ethereum.Call {
  get inputs(): LockNFTsCall__Inputs {
    return new LockNFTsCall__Inputs(this);
  }

  get outputs(): LockNFTsCall__Outputs {
    return new LockNFTsCall__Outputs(this);
  }
}

export class LockNFTsCall__Inputs {
  _call: LockNFTsCall;

  constructor(call: LockNFTsCall) {
    this._call = call;
  }

  get tokenIds_(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class LockNFTsCall__Outputs {
  _call: LockNFTsCall;

  constructor(call: LockNFTsCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RecoverCall extends ethereum.Call {
  get inputs(): RecoverCall__Inputs {
    return new RecoverCall__Inputs(this);
  }

  get outputs(): RecoverCall__Outputs {
    return new RecoverCall__Outputs(this);
  }
}

export class RecoverCall__Inputs {
  _call: RecoverCall;

  constructor(call: RecoverCall) {
    this._call = call;
  }
}

export class RecoverCall__Outputs {
  _call: RecoverCall;

  constructor(call: RecoverCall) {
    this._call = call;
  }
}

export class RecoverNFTsCall extends ethereum.Call {
  get inputs(): RecoverNFTsCall__Inputs {
    return new RecoverNFTsCall__Inputs(this);
  }

  get outputs(): RecoverNFTsCall__Outputs {
    return new RecoverNFTsCall__Outputs(this);
  }
}

export class RecoverNFTsCall__Inputs {
  _call: RecoverNFTsCall;

  constructor(call: RecoverNFTsCall) {
    this._call = call;
  }
}

export class RecoverNFTsCall__Outputs {
  _call: RecoverNFTsCall;

  constructor(call: RecoverNFTsCall) {
    this._call = call;
  }
}

export class RecoverTokensCall extends ethereum.Call {
  get inputs(): RecoverTokensCall__Inputs {
    return new RecoverTokensCall__Inputs(this);
  }

  get outputs(): RecoverTokensCall__Outputs {
    return new RecoverTokensCall__Outputs(this);
  }
}

export class RecoverTokensCall__Inputs {
  _call: RecoverTokensCall;

  constructor(call: RecoverTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RecoverTokensCall__Outputs {
  _call: RecoverTokensCall;

  constructor(call: RecoverTokensCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get count(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get tokenIds_(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StartAuctionCall extends ethereum.Call {
  get inputs(): StartAuctionCall__Inputs {
    return new StartAuctionCall__Inputs(this);
  }

  get outputs(): StartAuctionCall__Outputs {
    return new StartAuctionCall__Outputs(this);
  }
}

export class StartAuctionCall__Inputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StartAuctionCall__Outputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get dstTokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
